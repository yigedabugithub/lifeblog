let fs = require("fs");
var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var https = require('https');
var path = require('path');


// 创建https 服务
var options = {
    key: fs.readFileSync(path.join(__dirname, './9885433_lifeblog.cn.key')),
    cert: fs.readFileSync(path.join(__dirname, './9885433_lifeblog.cn.pem'))
};

var port = normalizePort(process.env.PORT || '3000');
var httpsServer = https.createServer(options, app.callback());
httpsServer.listen(port);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}

function onListening() {
    var addr = httpsServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


// 创建http 服务
// var port = normalizePort(process.env.PORT || '3000');
//  //app.set('port', port);

// var server = http.createServer(app.callback());
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

// function normalizePort(val) {
//     var port = parseInt(val, 10);

//     if (isNaN(port)) {
//         // named pipe
//         return val;
//     }

//     if (port >= 0) {
//         // port number
//         return port;
//     }

//     return false;
// }

// function onError(error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }

//     var bind = typeof port === 'string'
//         ? 'Pipe ' + port
//         : 'Port ' + port;

//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//         default:
//             throw error;
//     }
// }

// function onListening() {
//     var addr = server.address();
//     var bind = typeof addr === 'string'
//         ? 'pipe ' + addr
//         : 'port ' + addr.port;
//     debug('Listening on ' + bind);
// }
